---------------------------
class A{
	{
		System.out.print("b1 ");
	}
	public A(){
		System.out.print("b2 ");
	}
}

class B extends A{
	static {
		System.out.print("r1 ");
		}
	public B(){
		System.out.print("r2 ");
		
	}
	{
		System.out.print("r3 ");
	}
	static{
		System.out.print("r4 ");
	}
}

public class Test extends B {
	public static void main(String[] args) {
		System.out.print("pre");
		new Test();
		System.out.print("post");
	}
  
solution:-When we make object of a class 
All static blocks execute first then blocks and constructor.

Blocks and constructor executes (super class block then super class constructor, sub class block then sub class constructor).

Sequence for static blocks is super class first then sub class.

Sequence for blocks is super class first then sub class.
------------------------------------------------------------------------------

Java pass reference as value. passing the object reference, and not the actual object itself. 
Simply reassigning to the parameter used to pass the value into the method will do nothing, 
because the parameter is essentially a local variable.
--------------------------------------------------------
static public class Test  {
	public static void main(String[] args) {
		char c='a';
		switch (c) {
		case 65:
			System.out.println("one");
			break;
		case 'a':
			System.out.println("two");
			break;
		case 3:
			System.out.println("three");
			break;
		}
		
	}
}
can't make  Outer class static.. Outer class can only declare public , abstract and final.
Illegal modifier for the class Test; only public, abstract & final are permitted.

--------------------------------------------------------
 public class Test  {
	static int a ;
	public static void main(String[] args) {
		System.out.println("one");
		call(1);
	}
	public static void call(int a ){
		this.a=10;
		System.out.println("two "+a);
	}
}

Reason:-
static members are common for all objects, where as ‘this’ refer to a particular object.
so we cant use ‘this’ operator in the static methods.
---------------------------------------------------------------------------------------------
public class Test  {
	public static void main(String[] args) {
		int x = 10;
		x = myMethod(x--);
		System.out.println(x);
	}
	private static int myMethod(final int x) {
		return x--;
    //While compiling the Test class, the compilation error occurs implying that the final parameter x cannot be assigned a value. 
    //Therefore the option B is correct and remaining options are incorrect.
	}
	
}

-----------------------------------------------------------------------------------------
int[] a =new int[0];
		System.out.println(a.length);
--------------------------------------------------
int[] a =new int[3];
		System.out.println(a[0]);
In java, if the array is not initialized at the time of declaration and creation 
then all the elements of the array are initialized to 0 by default.


---------------------------------
016 is an octal number. The prefix 0 indicates that a number is in octal.
---------------
When you pass an array to a method , a reference is sent to it not the copy of array.
-------------------------
 In this question, double[] x = new double[]{1, 2, 3} is equivalent to double[] x = {1, 2, 3};
 -------------------------------
 System.out.println(""=="");
		System.out.println("A"=="A");
		System.out.println("a==A");
    -------------------------------------
 The modulus operator, % returns the remainder of a division operation. 
 It can be applied on floating-point types as well as integer types.
 (This differs from C/C++, in which the % can only be applied on integer types.)
 ------------------------------------------------------
 x *= 3 + 7; is same as x = x * (3 +7) = 5 * (10) = 50 
 because expression on the right side is always placed inside parentheses.
 -------------------------------------------------------
 & <-- verifies both operands
&& <-- stops evaluating if the first operand evaluates to false since the result will be false

(x != 0) & (1/x > 1) <-- this means evaluate (x != 0) then evaluate (1/x > 1) then do the &. the problem is that for x=0 this will throw an exception.

(x != 0) && (1/x > 1) <-- this means evaluate (x != 0) and only if this is true then evaluate (1/x > 1) so if you have x=0 then this is perfectly safe and won't throw any exception if (x != 0) evaluates to false the whole thing directly evaluates to false without evaluating the (1/x > 1).

EDIT:

exprA | exprB <-- this means evaluate exprA then evaluate exprB then do the |.

exprA || exprB <-- this means evaluate exprA and only if this is false then evaluate exprB and do the ||.

-----------------------------------------------------------------------------
The overriding method can throw any unchecked (runtime) exception, regardless of exception thrown by overridden method. 
NullPointerException is RuntimeException so compiler will not complain.
---------------------------------------------------------------------------------------
An Error is a subclass of Throwable that indicates serious problems that a reasonable application should not try to catch.
-----------------------------------------------------------------------------------------
Equals() method for the integer wrappers will only return true if the two primitive types and the two values are equal.
-------------------------------------------------------------------------------

 interface  Guard{
	void doYourJob();
}

abstract  class Test implements Guard {
	
}
//tell me the output : will run or give some error.!
------------------------------------------------------------
class cannot be abstract and final "there would be no way to use such a class".
interfaces and classes cannot be marked as static. 
classes and interfaces cannot be marked as protected.
----------------------------------------------------------------------------------

   class Test extends Thread {
	public static void main(String[] args) {
		Test t = new Test();
		t.run();
		t.start();
	}
	

	public void run(){
		System.out.println("run");
	}
}
   t.run() Legal, but does not start a new thread ,
   it is like a method call of a class Test BUT t.start() creates a thread and call run() method.
 ----------------------------------------------------------------------------------------------
 Once a thread has been started, it can never be started again. 
 2nd time t.start() throws java.lang.IllegalThreadStateException.
  ----------------------------------------------------------------------------------------------
  	class A implements Runnable{
		public void run(){
			try{
				for(int i=0;i<4;i++){
					Thread.sleep(1000);
					System.out.println(Thread.currentThread().getName());
				}
			}catch(InterruptedException e){
				e.getMessage();
				e.printStackTrace();
			}
			
		}
	}
   class Test  {
	public static void main(String[] args) throws InterruptedException {
		A a=new A();
		Thread t=new Thread(a,"A");
		Thread t2=new Thread(a,"B");
		Thread t3=new Thread(a,"c");
		t.start();
		t.join();
		t2.start();
		t2.join();
		t3.start();
	}
	
}

join() - Blocks the current Thread (Thread.currentThread()) until the receiver finishes its execution and dies
----------------------------------------------------------------------------------------------
import java.util.*;  
class I  
{ 
    public static void main (String[] args)  
    { 
        Object i = new ArrayList().iterator();  
        System.out.print((i instanceof List) + ", ");  
        System.out.print((i instanceof Iterator) + ", ");  
        System.out.print(i instanceof ListIterator);  
    }  
} 

Explanation:
The iterator() method returns an iterator over the elements in the list in proper sequence,
 it doesn’t return a List or a ListIterator object. A ListIterator can be obtained by invoking the listIterator method.
---------------------------------------------------------------------------------------------- 

Object i=new ArrayList().iterator();
System.out.println(i.getClass());
----------------------------------------------------------------------------------------------
ITERATOR	LISTITERATOR
Introduced in Java 1.2.	Introduced in Java 1.2.
It is an Iterator for whole Collection API.	It is an Iterator for only List implemented classes.
It is an Universal Iterator.	It is NOT an Universal Iterator.
It supports only Forward Direction Iteration.	It supports both Forward and Backward Direction iterations.
It’s a Uni-Directional Iterator.	It’s a Bi-Directional Iterator.
It supports only READ and DELETE operations.	It supports all CRUD operations.
We can get Iterator by using iterator() method.	We can ListIterator object using listIterator() method.
----------------------------------------------------------------------------------------------
class ThreadEx extends Thread 
{ 
    public void run() 
    { 
        System.out.print("Hello..."); 
    } 
    public static void main(String args[]) 
    { 
        ThreadEx T1 = new ThreadEx(); 
        T1.start(); 
        T1.stop(); 
        T1.start(); 
    } 
} 
------------------------------------------------------------------------------------------------
public class MyStuff 
{ 
    String name; 
  
    MyStuff(String n) {  name = n;  } 
  
    public static void main(String[] args) 
    { 
        MyStuff m1 = new MyStuff("guitar"); 
        MyStuff m2 = new MyStuff("tv"); 
        System.out.println(m2.equals(m1)); 
    } 
  
    @Override
    public boolean equals(Object obj) 
    { 
        MyStuff m = (MyStuff) obj; 
        if (m.name != null)  { return true;  } 
        return false; 
    } 
}
The output is true and MyStuff does NOT fulfill the Object.equals() contract.
Explanation : As equals(Object obj) method in Object class, compares two objects on the basis of equivalence relation.
But here we are just confirming that the object is null or not, So it doesn’t fulfill Object.equals() contract. 
As m1 is not null, true will be printed.
------------------------------------------------------------------------------------------------

StringBuilder s1=new StringBuilder("java");
		String s2="love";
		System.out.println(s1.append(s2));
		System.out.println(s1);
		System.out.println(s1.substring(4));
		System.out.println(s1);
		int foundAt=s1.indexOf(s2);
		System.out.println(foundAt);
------------------------------------------------------------------------------------------------
class Writer 
{ 
    public  static void write() 
    { 
        System.out.println("Writing..."); 
    } 
} 
class Author extends Writer 
{ 
    public  static void write() 
    { 
        System.out.println("Writing book"); 
    } 
} 
  
public class Programmer extends Author 
{ 
    public  static void write() 
    { 
        System.out.println("Writing code"); 
    } 
  
    public static void main(String[] args) 
    { 
        Author a = new Programmer(); 
        a.write(); 
    } 
} 

------------------------------------------------------------------------------------------------
class One implements Runnable  
{ 
    public void run()  
    { 
        System.out.print(Thread.currentThread().getName()); 
    } 
} 
class Two implements Runnable  
{ 
    public void run()  
    { 
        new One().run(); 
        new Thread(new One(),"gfg2").run(); 
        new Thread(new One(),"gfg3").start(); 
    } 
} 

class Test {
	public static void main(String[] args) throws InterruptedException {
		
		 new Thread(new Two(),"gfg1").start(); 
	}

}
------------------------------------------------------------------------------------------------
public class Gfg 
{ 
    public static void main(String[] args) 
    { 
        Integer a = 128, b = 128; 
        System.out.println(a == b); 
  
        Integer c = 100, d = 100; 
        System.out.println(c == d); 
    } 
}
--------------------------------------------------------------------------------------------------------
 Integer a = 128, b = 128; 
	        System.out.println(a == b); 
	  
	        Integer c = 100, d = 100; 
	        System.out.println(c == d);//true why ... -128 to 127
-------------------------------------------------------------------------------------------------------- 
public class Test 
{ 
    static Test t ; 
      
    static int count =0; 
      
    public static void main(String[] args) throws InterruptedException 
    { 
        Test t1 = new Test(); 
              
        // making t1 eligible for garbage collection 
        t1 = null; // line 12 
              
        // calling garbage collector 
        System.gc(); // line 15 
              
        // waiting for gc to complete 
        Thread.sleep(1000);  
      
        // making t eligible for garbage collection, 
        t = null; // line 21 
              
        // calling garbage collector 
        System.gc(); // line 24 
      
        // waiting for gc to complete 
        Thread.sleep(1000);  
              
        System.out.println("finalize method called "+count+" times"); 
          
    } 
      
    @Override
    protected void finalize()  
    {  
        count++; 
          
        t = this; // line 38 
              
    } 
      
} 
Here, we have to clear about one fact about Garbage Collector 
i.e. it will call finalize() method on a particular object exactly one time.
 Since on this object, finalize() method is already called, 
so now Garbage Collector will destroy it without calling finalize() method again.
-------------------
